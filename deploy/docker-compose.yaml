# Copyright (C) 2025 Cesar Perez

name: ${DEPLOYMENT_NAME}

services:

  traefik:
    restart: unless-stopped
    image: traefik:${TRAEFIK_VERSION}
    command: --config=/etc/traefik/traefik.yaml
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.entrypoints=http
      - traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_DASHBOARD_HOSTNAME}`)
      - traefik.http.services.dashboard.loadbalancer.server.port=8080
    configs:
      - source: traefik-config
        target: /etc/traefik/traefik.yaml
        mode: 0400
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    expose:
      - 8080
    ports:
      - ${TRAEFIK_HTTP_PORT}:80
    networks:
      external:
        aliases:
          - proxy
    healthcheck:
      test: "traefik healthcheck --ping"
      start_period: 5s
      start_interval: 2s
      interval: 5s
      timeout: 2s
      retries: 3
    deploy:
      mode: replicated

  # I use this service to configure and the the Traefik configuration
  whoami:
    restart: unless-stopped
    image: traefik/whoami:${WHOAMI_VERSION}
    command:
      - --port=12345
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.entrypoints=http
      - traefik.http.routers.whoami.rule=Host(`${WHOAMI_HOSTNAME}`)
      - traefik.http.services.whoami.loadbalancer.server.port=12345
      # This is an example on how to use a middleware
      - traefik.http.routers.whoami.middlewares=auth
      - traefik.http.middlewares.auth.basicauth.realm=${WHOAMI_REALM}
      - traefik.http.middlewares.auth.basicauth.users=${WHOAMI_USERNAME}:${WHOAMI_PASSWORD}
    networks:
      external:
        aliases:
          - whoami
    # healthcheck:
    #   test: "curl -X POST -d '500' http://localhost:12345/health"
    #   start_period: 5s
    #   start_interval: 2s
    #   interval: 5s
    #   timeout: 2s
    #   retries: 3
    deploy:
      mode: replicated
      replicas: ${WHOAMI_REPLICA_COUNT}

configs:
  traefik-config:
    content: |
      accesslog:
        addinternals true
      api:
        dashboard: ${TRAEFIK_ENABLE_DASHBOARD}
        insecure: true
      entryPoints:
        http:
          address: ":80"
      ping: {}
      log:
        level: ${TRAEFIK_LOG_LEVEL}
      providers:
        docker:
          exposedByDefault: false

networks:
  external:
    name: ${NETWORK_NAME}
    attachable: true
